generator client {
  provider = "prisma-client-js"
  output        = "../../../node_modules/.prisma/client"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:password@db:5432/village"
}

enum BuildingType {
  SAWMILL
  CLAY_PIT
  IRON_MINE
  FARM
  WAREHOUSE
  GRANARY
  MARKET
  BARRACKS
  STABLE
  WORKSHOP
  WALL
  TOWER
  SMITHY
  EMBASSY
  ACADEMY
  SHRINE
}

model Village {
  id        String   @id @default(uuid())
  name      String
  playerId  String
  x         Int?
  y         Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playerName String
  
  resourceAmounts          Json     @default("{\"food\":500,\"wood\":500,\"stone\":500,\"gold\":500}")
  resourceProductionRates  Json     @default("{\"food\":10,\"wood\":10,\"stone\":10,\"gold\":8}")
  lastCollectedAt         DateTime @default(now())

  buildings Building[] 
  constructionTasks ConstructionTask[]

  troops               Troop[]          @relation("VillageTroops")
  trainingTasks        TrainingTask[]   @relation("VillageTrainingTasks")
}

model Building {
  id          String        @id @default(uuid())
  village     Village       @relation(fields: [villageId], references: [id])
  villageId   String
  type        BuildingType
  level       Int           @default(0)
  name        String
  status      String        @default("idle")
  queuedUntil DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([villageId])
}

model ConstructionTask {
  id            String      @id @default(uuid())
  village       Village     @relation(fields: [villageId], references: [id])
  villageId     String
  buildingId    String
  type          BuildingType
  level         Int
  status        String      @default("queued")  // queued | in_progress | completed
  startTime     DateTime
  endTime       DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([villageId])
}


model Troop {
  id           String          @id @default(uuid())
  villageId    String
  troopType    String
  quantity     Int             @default(0)
  status       String          @default("idle")
  queuedUntil  DateTime?       
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  Village      Village         @relation("VillageTroops", fields: [villageId], references: [id])
  trainingTasks TrainingTask[]
  @@unique([villageId, troopType], name: "villageId_troopType")
}

model TrainingTask {
  id           String   @id @default(uuid())
  villageId    String
  troopId      String
  troopType    String
  count        Int
  remaining    Int
  status       String   @default("in_progress")
  startTime    DateTime @default(now())
  endTime      DateTime
  queueJobId   String
  buildingType String 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Troop        Troop    @relation(fields: [troopId], references: [id])
  Village      Village  @relation("VillageTrainingTasks", fields: [villageId], references: [id])
}
